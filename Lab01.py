# -*- coding: utf-8 -*-
"""Copy of Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1btPTfWG8Z8Mw3GFilknXjEELf5jiK7Ty

# **Lab 1: Introduction to Python libraries for Deep Learning**

**IT22607232 -Gamage S S J**

## **Task -01**

**Import Required Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D

# Set matplotlib to inline for Jupyter
# %matplotlib inline

# Set figure quality for better plots
plt.rcParams['figure.dpi'] = 100
plt.rcParams['savefig.dpi'] = 100

"""**1.1 Random 4Ã—4 array from an exponential distribution**"""

exp_array = np.random.exponential(scale=1.0, size=(4, 4))
print("4x4 array from exponential distribution:\n", exp_array)

"""**1.2 Compare exponential, uniform, and normal distributions**"""

# Create arrays
exp_data = np.random.exponential(scale=1.0, size=100000)   # Exponential
uniform_data = np.random.rand(100000)                          # Uniform [0,1)
normal_data = np.random.randn(100000)                        # Normal N(0,1)

# Plot histograms

plt.hist(exp_data, density=True, bins=200, histtype="step", color="red", label="Exponential")
plt.hist(uniform_data, density=True, bins=200, histtype="step", color="blue", label="Uniform")
plt.hist(normal_data, density=True, bins=200, histtype="step", color="green", label="Normal")

# Better axis limits for visualization
plt.axis([-2.5,8, 0, 1.3])
plt.legend(loc="upper right")
plt.title("Random Distributions: Exponential,Uniform,Normal")
plt.xlabel("Value")
plt.ylabel("Density")
plt.show()

"""1.3  3D Plot"""

# Create grid
x = np.linspace(-5, 5, 100)
y = np.linspace(-5, 5, 100)
X, Y = np.meshgrid(x, y)
Z = X**2 + Y**2

# Plot
fig = plt.figure(figsize=(8,6))
ax = fig.add_subplot(111, projection='3d')
ax.plot_surface(X, Y, Z, cmap='coolwarm')

# Labels
ax.set_xlabel("X-Axis")
ax.set_ylabel("Y-Axis")
ax.set_zlabel("Z-Axis")
ax.set_title("3D Plot of Z = X^2 + Y^2")
plt.show()

"""**1.4 Pearson & Spearman Correlation Heatmaps**"""

# Load Pokemon dataset
df = pd.read_csv('Pokemon.csv', index_col=0, encoding='latin')
stats_df = df.drop(['Name', 'Type 1', 'Type 2', 'Total', 'Stage', 'Legendary'], axis=1)

print(f"Pokemon dataset shape: {df.shape}")
print(f"Stats columns: {list(stats_df.columns)}")

# Pearson Correlation
plt.figure(figsize=(9, 8))
corr = stats_df.corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', center=0)
plt.title('Pearson Correlation Matrix - Pokemon Stats')
plt.show()

# Spearman Correlation
plt.figure(figsize=(9, 8))
corr_spearman = stats_df.corr(method='spearman')
sns.heatmap(corr_spearman, annot=True, cmap='coolwarm', center=0)
plt.title('Spearman Rank Correlation Matrix - Pokemon Stats')
plt.show()

"""## **Task - 02**

**1.1 Load the dataset and filter Columns**
"""

# Step 1: Load Dataset
df = pd.read_csv('Au_nanoparticle_dataset.csv', index_col=0, encoding='latin')

print("Original Dataset Shape:", df.shape)
df.head()


# Step 2: Create new dataframe with only the required columns
cols = ["N_total", "N_bulk", "N_surface", "R_avg"]
new_df = df[cols]
print("Filtered DataFrame Shape:", new_df.shape)
print("Filtered DataFrame Columns:", list(new_df.columns))

"""**1.2 Display first 20 samples of the dataframe**"""

print("\nFirst 20 samples:")
print(new_df.head(20))

"""**1.3 Calculate statistics**"""

stats = pd.DataFrame({
    "Mean": new_df.mean(),
    "Std Dev": new_df.std(),
    "25% Quartile": new_df.quantile(0.25),
    "50% Quartile(Median)": new_df.quantile(0.50),
    "75% Quartile": new_df.quantile(0.75)
})

print("\nStatistical Summary:")
print(stats)

"""**1.4 Plot histograms in 1x4 layout**"""

plt.figure(figsize=(16, 4))

plt.subplot(1, 4, 1)
plt.hist(new_df['N_total'], bins=30, color='purple', alpha=0.7)
plt.title('Histogram of N_total')
plt.xlabel('N_total')
plt.ylabel('Frequency')

plt.subplot(1, 4, 2)
plt.hist(new_df['N_bulk'], bins=30, color='red', alpha=0.7)
plt.title('Histogram of N_bulk')
plt.xlabel('N_bulk')
plt.ylabel('Frequency')

plt.subplot(1, 4, 3)
plt.hist(new_df['N_surface'], bins=30, color='skyblue', alpha=0.7)
plt.title('Histogram of N_surface')
plt.xlabel('N_surface')
plt.ylabel('Frequency')

plt.subplot(1, 4, 4)
plt.hist(new_df['R_avg'], bins=30, color='green', alpha=0.7)
plt.title('Histogram of R_avg')
plt.xlabel('R_avg')
plt.ylabel('Frequency')

plt.tight_layout()
plt.show()

"""**1.5 Pairplot of the dataframe**"""

sns.pairplot(new_df)
plt.show()

"""**1.6 Custom PairGrid with hist + KDE**"""

# Improved version with better readability
g = sns.PairGrid(new_df[['N_total', 'N_bulk', 'N_surface', 'R_avg']])

# Upper triangle: scatter plots (more readable)
g.map_upper(sns.scatterplot, alpha=0.6)

# Diagonal: histogram + KDE
g.map_diag(sns.histplot, kde=True)

# Lower triangle: regression plots
g.map_lower(sns.regplot, scatter_kws={'alpha':0.5})

plt.show()
plt.show()

g = sns.PairGrid(new_df)

# Upper: Bivariate histogram
g.map_upper(sns.histplot)

# Diagonal: Histogram + KDE
g.map_diag(sns.histplot, kde=True, color="orange")

# Lower: Bivariate KDE plot
g.map_lower(sns.kdeplot, fill=True, cmap="Blues")

plt.show()

"""**Completion of the Lab-01!!**"""